{"version":3,"sources":["webpack://PSPDFKit/./src/components/editor/DocumentEditorComponent.js"],"names":["a4Size","Size","width","A4_WIDTH","height","A4_HEIGHT","react__WEBPACK_IMPORTED_MODULE_17__","_LoadingComponent__WEBPACK_IMPORTED_MODULE_22__","ImportedDocumentPlaceholder","props","styles","formatMessage","style","className","importedDocument","importedDocumentIconCircle","_InlineSVGComponent__WEBPACK_IMPORTED_MODULE_21__","src","require","importedDocumentInfo","messages","documentMergedHere","getEditorPages","pages","operations","uwpFilenames","editorPages","map","page","type","rotation","label","pageLabel","getDupeNumber","editorPage","originalLabel","dupeOf","highestDupeNumber","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","undefined","_step4","_iterator4","Symbol","iterator","next","done","value","dupeNumber","err","return","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","operation","editorIndex","afterPageIndex","invariant","beforePageIndex","insert","newPage","size","pageWidth","pageHeight","editorPagesToDelete","pageIndexes","index","get","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","indexOf","delete","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","newEditorPage","newRotation","currentRotation","rotateBy","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_4___default","PSPDFKitError","set","editorPagesToDuplicate","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","Object","assign","concat","fromIndex","toIndex","fromPage","docName","document","path","has","name","Error","absurd","injectIntl","_classNames","_classNames2","onCancel","dispatch","backend","frameWindow","intl","CSS_HACK","_React$useState","React","Map","_React$useState2","_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default","_React$useState3","List","_React$useState4","setOperations","_React$useState5","_React$useState6","undoDepth","setUndoDepth","undidOperations","slice","_React$useState7","Set","_React$useState8","selectedIndexes","setSelectedIndexes","_React$useState9","_React$useState10","isCommitting","setIsCommitting","_React$useState11","_React$useState12","useLargeThumbnails","setUseLargeThumbnails","pushOperation","push","isAliveRef","current","handleAddClick","firstPage","pageSize","backgroundColor","Color","WHITE","first","clear","handleRemoveClick","toArray","handleDuplicateClick","handleRotateLeftClick","handleRotateRightClick","handleMoveLeftClick","newOperations","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","sort","pageIndex","handleMoveRightClick","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","reverse","handleUndoClick","handleRedoClick","handleImportClick","_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_5___default","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default","a","mark","_callee","position","inputEl","wrap","_context","prev","createElement","accept","onchange","event","target","files","length","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_loop","file","v","window","alert","findIndex","treatImportedDocumentAsOnePage","_iterator3","_ret","_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_3___default","click","stop","handleSelectAllClick","keySeq","toSet","handleSelectNoneClick","handlePageClick","add","handleCancelClick","handleSaveClick","applyOperationsAndReloadDocument","e","handleSaveAsClick","_callee2","buffer","_context2","exportPDFWithOperations","serializeDocumentOperation","sent","downloadPdfFromBuffer","t0","finish","canRotate","find","canDuplicate","canMoveLeft","isEmpty","includes","canMoveRight","canUndo","canRedo","toolbarButtonClassname","toolbar","toolbarButton","toolbarItems","onPress","disabled","children","removePage","duplicatePage","rotatePageLeft","rotatePageRight","moveBefore","moveAfter","mergeDocument","genericMessages","undo","redo","selectAll","selectNone","_React$useState13","Number","POSITIVE_INFINITY","_React$useState14","fittingToolbarItemsIndex","setFittingToolbarItemsIndex","_React$useMemo","filter","item","dropdownGroup","_React$useMemo2","fittingToolbarItems","overflowingToolbarItems","_React$useState15","_React$useState16","editorSize","setEditorSize","onResize","rect","toolbarRef","items","computedStyles","ownerDocument","defaultView","getComputedStyle","totalWidth","parseInt","getPropertyValue","call","child","clientWidth","innerWidth","BREAKPOINT_SM","_props$CSS_HACK$compo","components","ToolbarButtonComponent","ToolbarDropdownGroupComponent","classNames","docEditor","root","flex","ref","toolbarContainer","key","_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1___default","icon","discreteDropdown","caretDirection","ItemComponent","_ref3","isSelectedItem","dropdownButton","pagesView","_helpers_ResizeHelperComponent__WEBPACK_IMPORTED_MODULE_23__","_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default","pagesGrid","pagesGridLargeThumbnails","_GridViewComponent__WEBPACK_IMPORTED_MODULE_20__","totalItems","itemScale","scale","renderItemCallback","maxSize","_grid_PageThumbnailComponent__WEBPACK_IMPORTED_MODULE_7__","_computeThumbnailPara","computeThumbnailParams","rotatedWidth","rotatedHeight","_computeThumbnailPara2","containerWidth","containerHeight","onItemPress","selectedItemIndexes","cssPrefix","bottomBar","_pspdfkit_ui__WEBPACK_IMPORTED_MODULE_11__","onClick","cancel","pagesSelectedIndicator","pagesSelectedIndicatorShown","pagesSelectedIcon","pagesSelected","arg0","spacer","_ref4","saveAs","primary","save","defineMessages","id","defaultMessage","description"],"mappings":"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","file":"pspdfkit-lib/chunk-37-cbbfd7fa853288e6.js","sourcesContent":["// @flow\n\nimport {\n  default as PageThumbnailComponent,\n  computeThumbnailParams,\n} from '../grid/PageThumbnailComponent'\nimport { A4_WIDTH, A4_HEIGHT, BREAKPOINT_SM } from '../../constants/config'\nimport { absurd } from '@pspdfkit/shared'\nimport { applyOperationsAndReloadDocument } from '../../actions/documentOperations'\nimport { Button } from '@pspdfkit/ui'\nimport { defineMessages, injectIntl } from 'react-intl'\nimport { downloadPdfFromBuffer } from '../../utils/dom'\nimport { invariant, PSPDFKitError } from '@pspdfkit/shared'\nimport { List, Set, Map } from 'immutable'\nimport { Page, Size, Color } from '../../models'\nimport { serializeDocumentOperation } from '../../lib/serializers/utils'\nimport * as React from 'react'\nimport classNames from 'classnames'\nimport genericMessages from '../messages'\nimport GridViewComponent from '../GridViewComponent'\nimport InlineSVGComponent from '../InlineSVGComponent'\nimport LoadingComponent from '../LoadingComponent'\nimport ResizeHelperComponent from '../helpers/ResizeHelperComponent'\nimport type { Backend } from '../../lib/Backend'\nimport type { DocumentOperation } from '../../models/DocumentOperation'\nimport type { IntlShape } from 'react-intl'\n\ndeclare var PSPDFBridge: any\n\ntype Props = {\n  pages: List<Page>,\n  dispatch: () => void,\n  onCancel: () => void,\n  // TODO see TODO in DocumentEditorModalComponent.\n  CSS_HACK: {\n    components: { [component: string]: React.ComponentType<any> },\n    styles: { [className: string]: string, toolbar: { [className: string]: string } },\n  },\n  pages: List<Page>,\n  scale: number,\n  frameWindow: window,\n  backend: Backend,\n  intl: IntlShape,\n}\n\nconst a4Size = new Size({\n  width: A4_WIDTH,\n  height: A4_HEIGHT,\n})\n\nconst DocumentEditorComponent = (props: Props) => {\n  const {\n    onCancel,\n    pages,\n    dispatch,\n    backend,\n    frameWindow,\n    intl: { formatMessage },\n  } = props\n  const { styles } = props.CSS_HACK\n\n  const [uwpFilenames, setUwpFilenames] = React.useState<Map<string, string>>(Map())\n  const [operations, setOperations] = React.useState<List<DocumentOperation>>(List())\n  const [undoDepth, setUndoDepth] = React.useState(0)\n  const undidOperations = operations.slice(0, operations.size - undoDepth)\n  const editorPages = getEditorPages(props.pages, undidOperations, formatMessage, uwpFilenames)\n  const [selectedIndexes, setSelectedIndexes] = React.useState(Set<number>())\n  const [isCommitting, setIsCommitting] = React.useState(false)\n  const [useLargeThumbnails, setUseLargeThumbnails] = React.useState(false)\n\n  const pushOperation = React.useCallback(\n    (operation: DocumentOperation) => {\n      setOperations(undidOperations.push(operation))\n      setUndoDepth(0)\n    },\n    [undidOperations],\n  )\n\n  const isAliveRef = React.useRef(true)\n\n  React.useLayoutEffect(\n    () => () => {\n      if (isAliveRef.current) {\n        isAliveRef.current = false\n      }\n    },\n    [],\n  )\n\n  const handleAddClick = React.useCallback(() => {\n    const firstPage = pages.get(0)\n    const size = firstPage ? firstPage.pageSize : a4Size\n\n    let operation: any = {\n      type: 'addPage',\n      backgroundColor: Color.WHITE,\n      pageWidth: size.width,\n      pageHeight: size.height,\n      rotateBy: 0,\n    }\n\n    if (selectedIndexes.size === 1) {\n      operation.afterPageIndex = selectedIndexes.first()\n    } else {\n      operation.beforePageIndex = 0\n    }\n\n    pushOperation(operation)\n    setSelectedIndexes(selectedIndexes.clear())\n  }, [pages, selectedIndexes, pushOperation])\n\n  const handleRemoveClick = React.useCallback(() => {\n    pushOperation({\n      type: 'removePages',\n      pageIndexes: selectedIndexes.toArray(),\n    })\n\n    setSelectedIndexes(selectedIndexes.clear())\n  }, [pushOperation, selectedIndexes])\n\n  const handleDuplicateClick = React.useCallback(() => {\n    pushOperation({\n      type: 'duplicatePages',\n      pageIndexes: selectedIndexes.toArray(),\n    })\n\n    setSelectedIndexes(selectedIndexes.clear())\n  }, [pushOperation, selectedIndexes])\n\n  const handleRotateLeftClick = React.useCallback(() => {\n    pushOperation({\n      type: 'rotatePages',\n      pageIndexes: selectedIndexes.toArray(),\n      rotateBy: 270,\n    })\n  }, [pushOperation, selectedIndexes])\n\n  const handleRotateRightClick = React.useCallback(() => {\n    pushOperation({\n      type: 'rotatePages',\n      pageIndexes: selectedIndexes.toArray(),\n      rotateBy: 90,\n    })\n  }, [pushOperation, selectedIndexes])\n\n  const handleMoveLeftClick = React.useCallback(() => {\n    let newOperations = undidOperations\n    // We need to ensure we move the leftmost pages first\n    for (const index of selectedIndexes.sort()) {\n      newOperations = newOperations.push({\n        type: 'movePages',\n        pageIndexes: [index],\n        beforePageIndex: index - 1,\n      })\n    }\n\n    // The order of operations is important here, so we have to handle this\n    // ourselves instead of calling pushOperation() multiple times.\n    setOperations(newOperations)\n    setUndoDepth(0)\n    setSelectedIndexes(Set(selectedIndexes.toArray().map(pageIndex => pageIndex - 1)))\n  }, [selectedIndexes, undidOperations])\n\n  const handleMoveRightClick = React.useCallback(() => {\n    let newOperations = undidOperations\n    for (const index of selectedIndexes.sort().reverse()) {\n      newOperations = newOperations.push({\n        type: 'movePages',\n        pageIndexes: [index],\n        afterPageIndex: index,\n      })\n    }\n\n    setOperations(newOperations)\n    setUndoDepth(0)\n    setSelectedIndexes(Set(selectedIndexes.toArray().map(pageIndex => pageIndex + 1)))\n  }, [selectedIndexes, undidOperations])\n\n  const handleUndoClick = React.useCallback(() => {\n    setSelectedIndexes(selectedIndexes.clear())\n    setUndoDepth(undoDepth + 1)\n  }, [selectedIndexes, undoDepth])\n\n  const handleRedoClick = React.useCallback(() => {\n    setSelectedIndexes(selectedIndexes.clear())\n    setUndoDepth(undoDepth - 1)\n  }, [selectedIndexes, undoDepth])\n\n  const handleImportClick = React.useCallback(async () => {\n    let position = {}\n    if (selectedIndexes.size === 1) {\n      position.afterPageIndex = selectedIndexes.first()\n    } else {\n      position.beforePageIndex = 0\n    }\n\n    if (PSPDFKIT_DEFINES.STANDALONE_NATIVE) {\n      const uwpDocument = JSON.parse(await PSPDFBridge.openDocumentAsync())\n      if (uwpDocument.filename == null) {\n        // User cancelled the dialog\n        return\n      }\n\n      const path: string = uwpDocument.path\n      const filename: string = uwpDocument.filename\n      setUwpFilenames(uwpFilenames.set(path, filename))\n\n      pushOperation(\n        // $FlowIssue: position contains before/afterPageIndex\n        ({\n          type: 'importDocument',\n          treatImportedDocumentAsOnePage: true,\n          document: path,\n          ...position,\n        }: DocumentOperation),\n      )\n    } else {\n      const inputEl = document.createElement('input')\n      inputEl.type = 'file'\n      inputEl.accept = 'application/pdf'\n      inputEl.onchange = event => {\n        if (event.target.files.length === 0) {\n          return\n        }\n\n        let newOperations = undidOperations\n        for (const file: File of event.target.files) {\n          if (typeof file.name !== 'string' || file.name.length === 0) {\n            return\n          }\n\n          if (file.type !== 'application/pdf') {\n            window.alert('The uploaded file must be a PDF.')\n            return\n          }\n\n          if (\n            editorPages.findIndex(\n              editorPage =>\n                editorPage.type === 'importedDocument' && editorPage.label === file.name,\n            ) !== -1\n          ) {\n            // Document has already been imported\n            return\n          }\n\n          newOperations = newOperations.push(\n            // $FlowIssue: position contains before/afterPageIndex\n            ({\n              type: 'importDocument',\n              treatImportedDocumentAsOnePage: true,\n              // File is a Blob\n              document: file,\n              ...position,\n            }: DocumentOperation),\n          )\n        }\n\n        setOperations(newOperations)\n        setUndoDepth(0)\n        setSelectedIndexes(selectedIndexes.clear())\n      }\n\n      inputEl.click()\n    }\n  }, [selectedIndexes, uwpFilenames, pushOperation, undidOperations, editorPages])\n\n  const handleSelectAllClick = React.useCallback(() => {\n    setSelectedIndexes(editorPages.keySeq().toSet())\n  }, [editorPages, setSelectedIndexes])\n\n  const handleSelectNoneClick = React.useCallback(() => {\n    setSelectedIndexes(selectedIndexes.clear())\n  }, [selectedIndexes, setSelectedIndexes])\n\n  const handlePageClick = React.useCallback(\n    (index: number) => {\n      if (!selectedIndexes.has(index)) {\n        setSelectedIndexes(selectedIndexes.add(index))\n      } else {\n        setSelectedIndexes(selectedIndexes.delete(index))\n      }\n    },\n    [selectedIndexes, setSelectedIndexes],\n  )\n\n  const handleCancelClick = React.useCallback(() => {\n    onCancel()\n  }, [onCancel])\n\n  // A dummy `resolve()` callback is passed now, but it can be used to be notified when\n  // modifications and reloading are complete.\n  // However, keep in mind that when the document is reloaded, interactionMode is set to `null`\n  // and the Document Editor UI will disappear.\n  const handleSaveClick = React.useCallback(() => {\n    setIsCommitting(true)\n    dispatch(\n      applyOperationsAndReloadDocument(\n        undidOperations.toArray(),\n        () => {\n          if (isAliveRef.current) {\n            setIsCommitting(false)\n          }\n        },\n        e => {\n          if (isAliveRef.current) {\n            setIsCommitting(false)\n          }\n          throw e\n        },\n      ),\n    )\n  }, [dispatch, undidOperations])\n\n  const handleSaveAsClick = React.useCallback(async () => {\n    setIsCommitting(true)\n    try {\n      const buffer = await backend.exportPDFWithOperations(\n        undidOperations.toArray().map(serializeDocumentOperation),\n      )\n      downloadPdfFromBuffer(buffer, frameWindow)\n    } catch (e) {\n      throw e\n    } finally {\n      if (isAliveRef.current) {\n        setIsCommitting(false)\n      }\n    }\n  }, [backend, undidOperations, frameWindow])\n\n  const renderPage = (index: number, size: number, maxSize: number) => {\n    const editorPage = editorPages.get(index)\n    invariant(editorPage != null)\n\n    // $FlowIssue: Flow doesn't detect that item is always initialized.\n    let item\n\n    switch (editorPage.type) {\n      case 'page': {\n        item = (\n          <PageThumbnailComponent\n            key={`page-${editorPage.label}`}\n            page={editorPage.page}\n            size={size}\n            maxSize={maxSize}\n            rotation={editorPage.rotation}\n          />\n        )\n        break\n      }\n\n      case 'newPage': {\n        const { rotatedWidth, rotatedHeight } = computeThumbnailParams(\n          editorPage.size,\n          editorPage.rotation,\n          size,\n          maxSize,\n        )\n\n        item = (\n          <div\n            key={`newPage-${editorPage.label}`}\n            style={{ width: rotatedWidth, height: rotatedHeight }}\n          />\n        )\n        break\n      }\n\n      case 'importedDocument': {\n        const { containerWidth, containerHeight } = computeThumbnailParams(a4Size, 0, size, maxSize)\n\n        item = (\n          <ImportedDocumentPlaceholder\n            width={containerWidth}\n            height={containerHeight}\n            key={`importedDoc-${editorPage.label}`}\n            styles={styles}\n            formatMessage={formatMessage}\n          />\n        )\n        break\n      }\n\n      default:\n        absurd(editorPage.type)\n    }\n\n    return {\n      item,\n      label: editorPage.label,\n    }\n  }\n\n  const canRotate =\n    selectedIndexes.size > 0 &&\n    selectedIndexes.find(index => {\n      const editorPage = editorPages.get(index)\n      invariant(editorPage != null)\n      return editorPage.type !== 'page' && editorPage.type !== 'newPage'\n    }) === undefined\n\n  const canDuplicate =\n    selectedIndexes.size > 0 &&\n    selectedIndexes.find(index => {\n      const editorPage = editorPages.get(index)\n      invariant(editorPage != null)\n      return editorPage.type !== 'page'\n    }) === undefined\n\n  const canMoveLeft = !selectedIndexes.isEmpty() && !selectedIndexes.includes(0)\n  const canMoveRight = !selectedIndexes.isEmpty() && !selectedIndexes.includes(editorPages.size - 1)\n\n  const canUndo = undoDepth < operations.size\n  const canRedo = undoDepth > 0\n\n  const toolbarButtonClassname = styles.toolbar.toolbarButton\n  const toolbarItems = React.useMemo(() => {\n    return [\n      {\n        type: 'editor/add',\n        onPress: handleAddClick,\n        className: toolbarButtonClassname,\n        disabled: isCommitting,\n        children: formatMessage(messages.newPage),\n      },\n      {\n        type: 'editor/remove',\n        onPress: handleRemoveClick,\n        className: toolbarButtonClassname,\n        disabled:\n          selectedIndexes.size === 0 || selectedIndexes.size === editorPages.size || isCommitting,\n        children: formatMessage(messages.removePage),\n      },\n      {\n        type: 'editor/duplicate',\n        onPress: handleDuplicateClick,\n        className: toolbarButtonClassname,\n        children: formatMessage(messages.duplicatePage),\n        disabled: !canDuplicate || isCommitting,\n      },\n      {\n        type: 'editor/rotateLeft',\n        onPress: handleRotateLeftClick,\n        className: toolbarButtonClassname,\n        children: formatMessage(messages.rotatePageLeft),\n        disabled: !canRotate || isCommitting,\n      },\n      {\n        type: 'editor/rotateRight',\n        onPress: handleRotateRightClick,\n        className: toolbarButtonClassname,\n        children: formatMessage(messages.rotatePageRight),\n        disabled: !canRotate || isCommitting,\n      },\n      {\n        type: 'editor/moveLeft',\n        onPress: handleMoveLeftClick,\n        className: styles.toolbar.toolbarButton,\n        children: formatMessage(messages.moveBefore),\n        disabled: !canMoveLeft || isCommitting,\n      },\n      {\n        type: 'editor/moveRight',\n        onPress: handleMoveRightClick,\n        className: styles.toolbar.toolbarButton,\n        children: formatMessage(messages.moveAfter),\n        disabled: !canMoveRight || isCommitting,\n      },\n      {\n        type: 'editor/importDocument',\n        onPress: handleImportClick,\n        className: toolbarButtonClassname,\n        children: formatMessage(messages.mergeDocument),\n        disabled: isCommitting,\n      },\n      { type: 'spacer' },\n      {\n        type: 'editor/undo',\n        onPress: handleUndoClick,\n        className: styles.toolbar.toolbarButton,\n        children: formatMessage(genericMessages.undo),\n        disabled: !canUndo || isCommitting,\n      },\n      {\n        type: 'editor/redo',\n        onPress: handleRedoClick,\n        className: styles.toolbar.toolbarButton,\n        children: formatMessage(genericMessages.redo),\n        disabled: !canRedo || isCommitting,\n      },\n      {\n        type: 'editor/selectAll',\n        onPress: handleSelectAllClick,\n        className: toolbarButtonClassname,\n        children: formatMessage(messages.selectAll),\n        disabled: selectedIndexes.size === editorPages.size || isCommitting,\n      },\n      {\n        type: 'editor/selectNone',\n        onPress: handleSelectNoneClick,\n        className: toolbarButtonClassname,\n        children: formatMessage(messages.selectNone),\n        disabled: selectedIndexes.isEmpty() || isCommitting,\n      },\n    ]\n  }, [\n    handleAddClick,\n    toolbarButtonClassname,\n    isCommitting,\n    formatMessage,\n    handleRemoveClick,\n    selectedIndexes,\n    editorPages.size,\n    handleDuplicateClick,\n    canDuplicate,\n    handleRotateLeftClick,\n    canRotate,\n    handleRotateRightClick,\n    handleMoveLeftClick,\n    styles.toolbar.toolbarButton,\n    canMoveLeft,\n    handleMoveRightClick,\n    canMoveRight,\n    handleImportClick,\n    handleUndoClick,\n    canUndo,\n    handleRedoClick,\n    canRedo,\n    handleSelectAllClick,\n    handleSelectNoneClick,\n  ])\n\n  const [fittingToolbarItemsIndex, setFittingToolbarItemsIndex] = React.useState(\n    Number.POSITIVE_INFINITY,\n  )\n\n  // Here we split the toolbarItems in two arrays:\n  // 1. The items that fit in the toolbar.\n  // 2. The overflowing ones that will be rendered in a dropdown.\n  //\n  // When they all fit 2. will obviously be an empty array.\n  const [fittingToolbarItems, overflowingToolbarItems] = React.useMemo(() => {\n    if (fittingToolbarItemsIndex === Number.POSITIVE_INFINITY) {\n      return [toolbarItems, []]\n    }\n    return [\n      toolbarItems.slice(0, fittingToolbarItemsIndex),\n      toolbarItems\n        .slice(fittingToolbarItemsIndex)\n        .filter(item => item.type !== 'spacer')\n        .map(item => ({ item: { ...item, dropdownGroup: 'documentEditor' } })),\n    ]\n  }, [toolbarItems, fittingToolbarItemsIndex])\n\n  const [editorSize, setEditorSize] = React.useState(new Size())\n  const onResize = React.useCallback(\n    rect => {\n      // On resize we re-render ALL the toolbar items\n      // so that in the next useLayoutEffect we can measure how many fit.\n      setFittingToolbarItemsIndex(Number.POSITIVE_INFINITY)\n      setEditorSize(\n        new Size({\n          width: rect.width,\n          height: rect.height,\n        }),\n      )\n    },\n    [setEditorSize, setFittingToolbarItemsIndex],\n  )\n\n  const toolbarRef = React.useRef(null)\n\n  // In this LayoutEffect we find the index of the last toolbar item that fits.\n  React.useLayoutEffect(() => {\n    const toolbar = toolbarRef.current\n    if (!toolbar || editorSize.width === 0) {\n      return\n    }\n    const items = toolbar.children\n    // Bail when the rendered items === fittingToolbarItemsIndex\n    // otherwise we'd have an infinite loop.\n    if (items.length === fittingToolbarItemsIndex) {\n      return\n    }\n\n    // Find the index of the first item that overflows.\n    // Starts from 44 that is the size of the dropdown button for the overflowing items.\n    // Also add padding.\n    const computedStyles = toolbar.ownerDocument.defaultView.getComputedStyle(toolbar)\n    let totalWidth =\n      44 +\n      (parseInt(computedStyles.getPropertyValue('padding-left')) || 0) +\n      (parseInt(computedStyles.getPropertyValue('padding-right')) || 0)\n\n    const index = [].findIndex.call(items, (child, index) => {\n      // Ignore spacer size as it just fills in empty space and shrinks as needed.\n      if (toolbarItems[index].type === 'spacer') {\n        return false\n      }\n      totalWidth += child.clientWidth\n      return totalWidth > editorSize.width\n    })\n\n    if (index === -1) {\n      setFittingToolbarItemsIndex(Number.POSITIVE_INFINITY)\n    } else {\n      setFittingToolbarItemsIndex(index)\n    }\n\n    const currentWindow = toolbar.ownerDocument.defaultView\n    if (currentWindow.innerWidth >= BREAKPOINT_SM) {\n      setUseLargeThumbnails(true)\n    } else {\n      setUseLargeThumbnails(false)\n    }\n  }, [editorSize, fittingToolbarItemsIndex, setFittingToolbarItemsIndex, toolbarItems])\n\n  const { ToolbarButtonComponent, ToolbarDropdownGroupComponent } = props.CSS_HACK.components\n\n  return (\n    <div className={classNames(styles.docEditor, 'PSPDFKit-DocumentEditor')}>\n      <div className={styles.toolbar.root} style={{ flex: 0 }}>\n        <div ref={toolbarRef} className={styles.toolbarContainer}>\n          {fittingToolbarItems.map((item, index) =>\n            item.type === 'spacer' ? (\n              <div style={{ flex: 1 }} key={`spacer-${index}`} />\n            ) : (\n              <ToolbarButtonComponent {...item} key={item.type} />\n            ),\n          )}\n        </div>\n        {overflowingToolbarItems.length > 0 && (\n          <>\n            <div style={{ flex: 1 }} key=\"spacer-responsive\" />\n            <ToolbarDropdownGroupComponent\n              icon={{ type: 'more', size: { width: 20, height: 20 } }}\n              items={overflowingToolbarItems}\n              discreteDropdown={true}\n              caretDirection=\"down\"\n              ItemComponent={({ item, isSelectedItem }) =>\n                isSelectedItem ? null : (\n                  <ToolbarButtonComponent\n                    {...item.item}\n                    key={item.type}\n                    className={classNames(item.item.className, styles.toolbar.dropdownButton)}\n                  />\n                )\n              }\n            />\n          </>\n        )}\n      </div>\n\n      <div className={styles.pagesView}>\n        <ResizeHelperComponent onResize={onResize} />\n        <div\n          className={classNames({\n            [styles.pagesGrid]: true,\n            [styles.pagesGridLargeThumbnails]: useLargeThumbnails,\n          })}\n        >\n          <GridViewComponent\n            totalItems={editorPages.size}\n            width={editorSize.width}\n            height={editorSize.height}\n            itemScale={props.scale}\n            renderItemCallback={renderPage}\n            onItemPress={handlePageClick}\n            selectedItemIndexes={selectedIndexes}\n            cssPrefix=\"PSPDFKit-DocumentEditor\"\n          />\n        </div>\n      </div>\n\n      <div className={styles.bottomBar}>\n        <Button onClick={handleCancelClick}>{formatMessage(genericMessages.cancel)}</Button>\n        <div\n          className={classNames({\n            [styles.pagesSelectedIndicator]: true,\n            [styles.pagesSelectedIndicatorShown]: selectedIndexes.size > 0,\n          })}\n        >\n          <div className={styles.pagesSelectedIcon}>\n            <InlineSVGComponent src={require('../../styles/images/editor/multiplePages.svg')} />\n          </div>\n\n          {formatMessage(messages.pagesSelected, { arg0: selectedIndexes.size })}\n        </div>\n        <div className={styles.spacer} />\n        {isCommitting && <LoadingComponent />}\n        <Button disabled={isCommitting} onClick={handleSaveAsClick}>\n          {formatMessage(messages.saveAs)}\n        </Button>\n        <Button\n          primary={true}\n          disabled={undidOperations.isEmpty() || isCommitting}\n          onClick={handleSaveClick}\n        >\n          {formatMessage(genericMessages.save)}\n        </Button>\n      </div>\n    </div>\n  )\n}\n\ntype ImportedDocumentPlaceholderProps = {|\n  styles: any,\n  width: number,\n  height: number,\n  formatMessage: $PropertyType<IntlShape, 'formatMessage'>,\n|}\n\nconst ImportedDocumentPlaceholder = (props: ImportedDocumentPlaceholderProps) => {\n  const { styles, formatMessage } = props\n\n  return (\n    <div style={{ width: props.width, height: props.height }} className={styles.importedDocument}>\n      <div className={styles.importedDocumentIconCircle}>\n        <InlineSVGComponent src={require('../../styles/images/editor/importDocument.svg')} />\n      </div>\n\n      <span className={styles.importedDocumentInfo}>\n        {formatMessage(messages.documentMergedHere)}\n      </span>\n    </div>\n  )\n}\n\ntype Rotation = 0 | 90 | 180 | 270\n\ntype EditorPage =\n  | {|\n      type: 'page',\n      page: Page,\n      label: string,\n      rotation: Rotation,\n      dupeOf?: string,\n      dupeNumber?: number,\n    |}\n  | {|\n      type: 'newPage',\n      label: string,\n      rotation: Rotation,\n      size: Size,\n    |}\n  | {|\n      type: 'importedDocument',\n      label: string,\n    |}\n\nconst getEditorPages = (\n  pages: List<Page>,\n  operations: List<DocumentOperation>,\n  formatMessage: $PropertyType<IntlShape, 'formatMessage'>,\n  uwpFilenames: Map<string, string>,\n): List<EditorPage> => {\n  let editorPages: List<EditorPage> = pages.map(\n    (page: Page): EditorPage => ({\n      type: 'page',\n      page: page,\n      rotation: 0,\n      label: page.pageLabel,\n    }),\n  )\n\n  const getDupeNumber = (editorPage: EditorPage): number => {\n    const originalLabel = editorPage.dupeOf || editorPage.label\n    let highestDupeNumber = 0\n    for (const editorPage of editorPages) {\n      if (\n        editorPage.dupeOf != null &&\n        editorPage.dupeOf === originalLabel &&\n        editorPage.dupeNumber != null &&\n        editorPage.dupeNumber > highestDupeNumber\n      ) {\n        highestDupeNumber = editorPage.dupeNumber\n      }\n    }\n\n    return highestDupeNumber + 1\n  }\n\n  for (const operation of operations) {\n    switch (operation.type) {\n      case 'addPage': {\n        let editorIndex\n        if (operation.afterPageIndex != null) {\n          editorIndex = operation.afterPageIndex + 1\n        } else {\n          invariant(operation.beforePageIndex != null)\n          editorIndex = operation.beforePageIndex\n        }\n\n        editorPages = editorPages.insert(editorIndex, {\n          type: 'newPage',\n          label: formatMessage(messages.newPage),\n          rotation: 0,\n          size: new Size({\n            width: operation.pageWidth,\n            height: operation.pageHeight,\n          }),\n        })\n\n        break\n      }\n      case 'removePages': {\n        // Store values ahead of time, since we can't rely on indexes while\n        // editorPages is being modified\n        const editorPagesToDelete = operation.pageIndexes.map(index => editorPages.get(index))\n        for (const editorPage of editorPagesToDelete) {\n          invariant(editorPage != null)\n          const index = editorPages.indexOf(editorPage)\n          editorPages = editorPages.delete(index)\n        }\n\n        break\n      }\n      case 'rotatePages': {\n        for (const index of operation.pageIndexes) {\n          const editorPage = editorPages.get(index)\n          invariant(editorPage != null)\n          let newEditorPage\n          let newRotation\n          invariant(editorPage.type === 'page' || editorPage.type === 'newPage')\n          const currentRotation = editorPage.rotation\n\n          // We want to ensure that our rotation can only be 0, 90, 180, or 270,\n          // so that our rendering logic is simpler\n\n          if (operation.rotateBy === 90) {\n            if (currentRotation === 270) {\n              newRotation = 0\n            } else {\n              newRotation = currentRotation + operation.rotateBy\n            }\n          } else {\n            if (currentRotation === 90) {\n              newRotation = 0\n            } else if (currentRotation === 180) {\n              newRotation = 90\n            } else if (currentRotation === 270) {\n              newRotation = 180\n            } else {\n              newRotation = currentRotation + operation.rotateBy\n            }\n          }\n\n          invariant(\n            newRotation === 0 || newRotation === 90 || newRotation === 180 || newRotation === 270,\n          )\n          if (editorPage.type === 'page') {\n            newEditorPage = {\n              ...editorPage,\n              rotation: newRotation,\n            }\n          } else if (editorPage.type == 'newPage') {\n            newEditorPage = {\n              ...editorPage,\n              rotation: newRotation,\n            }\n          } else {\n            throw new PSPDFKitError('Rotation is not allowed on imported documents')\n          }\n\n          editorPages = editorPages.set(index, newEditorPage)\n        }\n\n        break\n      }\n      case 'duplicatePages': {\n        // We need to store the pages before looping over and modifying editorPages\n        const editorPagesToDuplicate = operation.pageIndexes.map(index => editorPages.get(index))\n        for (const editorPage of editorPagesToDuplicate) {\n          invariant(editorPage != null)\n          invariant(editorPage.type === 'page')\n          const dupeNumber = getDupeNumber(editorPage)\n          const originalLabel = editorPage.dupeOf || editorPage.label\n          const index = editorPages.indexOf(editorPage)\n\n          editorPages = editorPages.insert(\n            index + 1,\n            // $FlowIssue: editorPage is already of type EditorPage\n            Object.assign({}, editorPage, {\n              label: `${originalLabel} (${dupeNumber})`,\n              dupeOf: originalLabel,\n              dupeNumber: dupeNumber,\n            }),\n          )\n        }\n\n        break\n      }\n      case 'movePages': {\n        // We only ever move one page per operation, so we can work under that\n        // assumption here.\n\n        const fromIndex = operation.pageIndexes[0]\n\n        let toIndex\n        if (operation.beforePageIndex != null) {\n          toIndex = operation.beforePageIndex\n        } else {\n          invariant(operation.afterPageIndex != null)\n          toIndex = operation.afterPageIndex + 1\n        }\n\n        const fromPage = editorPages.get(fromIndex)\n        editorPages = editorPages.delete(fromIndex)\n        invariant(fromPage != null)\n        editorPages = editorPages.insert(toIndex, fromPage)\n\n        break\n      }\n      case 'importDocument': {\n        let index\n        if (operation.beforePageIndex != null) {\n          index = operation.beforePageIndex\n        } else {\n          invariant(operation.afterPageIndex != null)\n          index = operation.afterPageIndex + 1\n        }\n\n        let docName: string\n        if (typeof operation.document === 'string') {\n          // UWP imported document\n\n          const path: string = operation.document\n          invariant(uwpFilenames.has(path))\n\n          // 'Imported Document' should never be used due to the above check\n          docName = uwpFilenames.get(path, 'Imported Document')\n        } else {\n          invariant(typeof operation.document.name === 'string')\n          docName = operation.document.name\n        }\n\n        editorPages = editorPages.insert(index, {\n          type: 'importedDocument',\n          label: docName,\n        })\n\n        break\n      }\n      case 'keepPages': {\n        throw Error('Unknown document operation')\n      }\n      default:\n        absurd(operation.type)\n    }\n  }\n\n  return editorPages\n}\n\nexport default injectIntl(DocumentEditorComponent)\n\nconst messages = defineMessages({\n  newPage: {\n    id: 'newPage',\n    defaultMessage: 'New Page',\n    description: 'Add new page',\n  },\n  removePage: {\n    id: 'removePage',\n    defaultMessage: 'Remove Page',\n    description: 'Remove page',\n  },\n  duplicatePage: {\n    id: 'duplicatePage',\n    defaultMessage: 'Duplicate Page',\n    description: 'Duplicate page',\n  },\n  rotatePageLeft: {\n    id: 'rotatePageLeft',\n    defaultMessage: 'Rotate Page Left',\n    description: 'Rotate Page Left',\n  },\n  rotatePageRight: {\n    id: 'rotatePageRight',\n    defaultMessage: 'Rotate Page Right',\n    description: 'Rotate Page Right',\n  },\n  mergeDocument: {\n    id: 'mergeDocument',\n    defaultMessage: 'Merge Document',\n    description: 'Merge Document',\n  },\n  selectAll: {\n    id: 'selectAll',\n    defaultMessage: 'Select All',\n    description: 'Select All Pages',\n  },\n  selectNone: {\n    id: 'selectNone',\n    defaultMessage: 'Select None',\n    description: 'Deselect All Pages',\n  },\n  saveAs: {\n    id: 'saveAs',\n    defaultMessage: 'Export Modified Document',\n    description: 'Save Modified Document Locally',\n  },\n  moveBefore: {\n    id: 'moveBefore',\n    defaultMessage: 'Move Before',\n    description: 'Move page before previous one',\n  },\n  moveAfter: {\n    id: 'moveAfter',\n    defaultMessage: 'Move After',\n    description: 'Move page after next one',\n  },\n  documentMergedHere: {\n    id: 'documentMergedHere',\n    defaultMessage: 'Document will be merged here',\n    description: 'Placeholder for the imported document',\n  },\n  save: {\n    id: 'save',\n    defaultMessage: 'Apply Modifications',\n    description: 'Apply Modifications to the current Document',\n  },\n  pagesSelected: {\n    id: 'pagesSelected',\n    defaultMessage: `{arg0, plural,\n      =0 {{arg0} Pages}\n      one {{arg0} Page}\n      two {{arg0} Pages}\n      other {{arg0} Pages}\n    }`,\n    description: 'Number of pages selected.',\n  },\n})\n"],"sourceRoot":""}